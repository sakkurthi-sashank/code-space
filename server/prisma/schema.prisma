generator client {
  provider     = "prisma-kysely"
  output       = "../src/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()"))
  firstName               String
  lastName                String
  emailAddress            String
  admissionNumber         String
  section                 String?
  batch                   String?
  branch                  String?
  createdAt               DateTime?                 @default(now())
  StudentCourseEnrollment StudentCourseEnrollment[]
}

model Course {
  id                      String                    @id(map: "Courses_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseName              String
  createdAt               DateTime?                 @default(now())
  courseDescription       String?
  learningTags            String[]
  courseStartDate         DateTime
  courseEndDate           DateTime
  courseUnqId             String
  professorName           String?
  CourseContent           CourseContent[]
  StudentCourseEnrollment StudentCourseEnrollment[]
}

model CourseContent {
  id                     String    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt              DateTime? @default(now())
  contentName            String
  courseContentStartDate DateTime
  courseContentEndDate   DateTime
  courseId               String
  Course                 Course    @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model StudentCourseEnrollment {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime? @default(now())
  studentId String?   @db.Uuid
  courseId  String?   @db.Uuid
  Course    Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Student   Student?  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
